package marianna.yurk.fitness_app.chat;


import marianna.yurk.fitness_app.stats.DailyReportService;
import marianna.yurk.fitness_app.stats.DailySummaryDTO;
import marianna.yurk.fitness_app.user.Goal;
import marianna.yurk.fitness_app.user.User;
import marianna.yurk.fitness_app.user.UserService;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class ChatService {
    private final WebClient webClient;
    private final UserService userService;
    private final DailyReportService dailyReportService;
    private final ChatHistoryRepository chatHistoryRepository;

    @Value("${together.api.key}")
    private String apiKey;

    public ChatService(WebClient.Builder webClientBuilder,
                          UserService userService,
                          DailyReportService dailyReportService,
                          ChatHistoryRepository chatHistoryRepository) {
        this.webClient = webClientBuilder.baseUrl("https://api.together.xyz/v1").build();
        this.userService = userService;
        this.dailyReportService = dailyReportService;
        this.chatHistoryRepository = chatHistoryRepository;
    }

    public Mono<Map<String, Object>> handleChat(String userEmail, String userMessage) {
        User user = userService.getUserByEmail(userEmail)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        DailySummaryDTO report = dailyReportService.generateReport(user.getId(), LocalDate.now());
        List<ChatHistory> history = getChatHistory(user);

        saveMessage(user, "user", userMessage);

        return generateAIResponse(user, report, history, userMessage)
                .flatMap(assistantReply -> {
                    saveMessage(user, "assistant", assistantReply);
                    return Mono.just(Map.of("reply", assistantReply));
                });
    }

    private List<ChatHistory> getChatHistory(User user) {
        List<ChatHistory> history = chatHistoryRepository
                .findTop20ByUserOrderByTimestampDesc(user);
        Collections.reverse(history);
        return history;
    }

    private void saveMessage(User user, String role, String content) {
        chatHistoryRepository.save(new ChatHistory(
                null,
                user,
                role,
                content,
                LocalDateTime.now()
        ));
    }

    private Mono<String> generateAIResponse(User user,
                                            DailySummaryDTO report,
                                            List<ChatHistory> history,
                                            String userMessage) {
        String systemPrompt = buildSystemPrompt(user, report, history);
        List<Map<String, String>> messages = prepareMessageHistory(systemPrompt, history, userMessage);

        return webClient.post()
                .uri("/chat/completions")
                .header(HttpHeaders.AUTHORIZATION, "Bearer " + apiKey)
                .contentType(MediaType.APPLICATION_JSON)
                .bodyValue(Map.of(
                        "model", "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
                        "messages", messages,
                        "temperature", 0.7,
                        "max_tokens", 500
                ))
                .retrieve()
                .onStatus(status -> status.isError(), this::handleAPIError)
                .bodyToMono(new ParameterizedTypeReference<Map<String, Object>>() {})
                .map(this::extractAssistantReply);
    }

    private String buildSystemPrompt(User user, DailySummaryDTO report, List<ChatHistory> history) {
        return String.format("""
            –¢—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á—Ç–æ–±—ã –¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
            
            ### –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
            %s
            
            ### –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
            %s
            
            ### –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:
            %s
            
            ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
            1. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            2. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º
            3. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            4. –£—á–∏—Ç—ã–≤–∞–π —Ü–µ–ª–∏ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            5. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - —É—Ç–æ—á–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            6. –î–µ–ª–∞–π –æ—Ç–≤–µ—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏ –∫—Ä–∞—Ç–∫–∏–º–∏
            7. –ü—Ä–µ–¥–ª–∞–≥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
            8. –°—Ç–∞—Ä–∞–π—Å—è, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 4‚Äì6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            """,
                buildUserProfile(user),
                buildTrackersInfo(report),
                formatChatHistory(history)
        );
    }

    private String buildUserProfile(User user) {
        return String.format("""
            üë§ –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
            - –ü–æ–ª: %s
            - –í–æ–∑—Ä–∞—Å—Ç: %s
            - –í–µ—Å: %s
            - –†–æ—Å—Ç: %s
            
            üéØ –¶–µ–ª–∏:
            - –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: %s
            - –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å: %s
            - –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: %s
            
            ‚öïÔ∏è –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
            - –ê–ª–ª–µ—Ä–≥–∏–∏: %s
            - –ù–µ–ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ—Å—Ç–∏: %s
           
            """,
                formatValue(user.getGender(), "–ù–µ —É–∫–∞–∑–∞–Ω", g -> g.equalsIgnoreCase("male") ? "–ú—É–∂—Å–∫–æ–π" : "–ñ–µ–Ω—Å–∫–∏–π"),
                formatValue(user.getBirthDate(), "–ù–µ —É–∫–∞–∑–∞–Ω",
                        bd -> String.valueOf(Period.between(bd, LocalDate.now()).getYears()) + " –ª–µ—Ç"),
                formatValue(user.getWeight(), "–ù–µ —É–∫–∞–∑–∞–Ω", w -> w + " –∫–≥"),
                formatValue(user.getHeight(), "–ù–µ —É–∫–∞–∑–∞–Ω", h -> h + " —Å–º"),
                formatValue(user.getActivityLevel(), "–ù–µ —É–∫–∞–∑–∞–Ω", this::translateActivityLevel),
                formatValue(user.getGoal(), "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", this::translateGoal),
                formatValue(user.getDailyCalorieNorm(), "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", n -> String.format("%.0f –∫–∫–∞–ª", n)),
                formatValue(user.getAllergies(), "–ù–µ—Ç", String::toString),
                formatValue(user.getIntolerances(), "–ù–µ—Ç", String::toString)
        );
    }

    private String buildTrackersInfo(DailySummaryDTO report) {
        return String.format("""
            üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
            - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –º–∏–Ω
            
            üçé –ü–∏—Ç–∞–Ω–∏–µ:
            - –ö–∞–ª–æ—Ä–∏–∏: %.0f
            - –ë–µ–ª–∫–∏: %.1f–≥
            - –ñ–∏—Ä—ã: %.1f–≥
            - –£–≥–ª–µ–≤–æ–¥—ã: %.1f–≥
            
            üí§ –°–æ–Ω:
            - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %.1f —á
            
            üíß –ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è:
            - –í—ã–ø–∏—Ç–æ: %.0f/%.0f –º–ª (%.0f%%)
            """,
                report.getActivityDurationMinutes(),
                report.getTotalCalories(),
                report.getTotalProteins(),
                report.getTotalFats(),
                report.getTotalCarbs(),
                report.getSleepDuration(),
                report.getTotalIntakeMl(),
                report.getGoalMl(),
                (report.getTotalIntakeMl() / report.getGoalMl()) * 100
        );
    }

    private List<Map<String, String>> prepareMessageHistory(String systemPrompt,
                                                            List<ChatHistory> history,
                                                            String userMessage) {
        List<Map<String, String>> messages = new ArrayList<>();
        messages.add(Map.of("role", "system", "content", systemPrompt));

        history.forEach(entry -> messages.add(Map.of(
                "role", entry.getRole(),
                "content", entry.getContent()
        )));

        messages.add(Map.of("role", "user", "content", userMessage));
        return messages;
    }

    private String formatChatHistory(List<ChatHistory> history) {
        return history.isEmpty() ? "–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏" :
                history.stream()
                        .map(entry -> String.format("[%s] %s: %s",
                                entry.getTimestamp().format(DateTimeFormatter.ofPattern("dd.MM HH:mm")),
                                entry.getRole().equals("user") ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" : "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç",
                                entry.getContent()))
                        .collect(Collectors.joining("\n"));
    }

    private <T> String formatValue(T value, String defaultValue, java.util.function.Function<T, String> formatter) {
        return value != null ? formatter.apply(value) : defaultValue;
    }

    private String translateActivityLevel(String level) {
        return switch (level.toLowerCase()) {
            case "sedentary" -> "–°–∏–¥—è—á–∏–π";
            case "light" -> "–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å";
            case "moderate" -> "–£–º–µ—Ä–µ–Ω–Ω–∞—è";
            case "active" -> "–ê–∫—Ç–∏–≤–Ω—ã–π";
            case "very_active" -> "–û—á–µ–Ω—å –∞–∫—Ç–∏–≤–Ω—ã–π";
            default -> level;
        };
    }

    private String translateGoal(Goal goal) {
        return switch (goal) {
            case LOSE -> "–ü–æ—Ö—É–¥–µ–Ω–∏–µ üèÉ‚ôÄÔ∏è";
            case GAIN -> "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã üí™";
            case MAINTAIN -> "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞ ‚öñÔ∏è";
        };
    }

    private Mono<Throwable> handleAPIError(org.springframework.web.reactive.function.client.ClientResponse response) {
        return response.bodyToMono(String.class)
                .flatMap(body -> {
                    String errorMsg = "–û—à–∏–±–∫–∞ API: " + response.statusCode() + " - " + body;
                    System.err.println(errorMsg);
                    return Mono.error(new RuntimeException(errorMsg));
                });
    }

    private String extractAssistantReply(Map<String, Object> response) {
        List<Map<String, Object>> choices = (List<Map<String, Object>>) response.get("choices");
        if (choices != null && !choices.isEmpty()) {
            Map<String, Object> message = (Map<String, Object>) choices.get(0).get("message");
            if (message != null) {
                String rawContent = message.get("content").toString();

                if (rawContent.startsWith("{role=assistant, content=")) {
                    rawContent = rawContent.replaceFirst("\\{role=assistant, content=", "")
                            .replaceAll("}$", "");
                }

                String cleanedContent = rawContent
                        .replaceAll("\\*", "")     // —É–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏
                        .replaceAll("\\n+", " ")   // –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –ø—Ä–æ–±–µ–ª
                        .replaceAll(" +", " ")     // —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                        .trim();                   // —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º

                return cleanedContent;
            } else {
                return "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏.";
            }
        }
        return "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ choices.";
    }


}
